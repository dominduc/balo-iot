// === assistant.js ===
let reminders = JSON.parse(localStorage.getItem('reminders')) || []; // L·∫•y danh s√°ch l·ªùi nh·∫Øc t·ª´ localStorage, n·∫øu ch∆∞a c√≥ th√¨ t·∫°o m·∫£ng r·ªóng
let pendingReminder = null;                                          // Bi·∫øn t·∫°m ƒë·ªÉ l∆∞u l·ªùi nh·∫Øc ƒëang ch·ªù ng∆∞·ªùi d√πng x√°c nh·∫≠n

function updateReminderSummary() {                                   // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng l·ªùi nh·∫Øc ch∆∞a ƒë∆∞·ª£c th√¥ng b√°o tr√™n giao di·ªán
  const summaryBtn = document.getElementById("reminder-summary");
  const badge = document.getElementById("reminder-badge");
  const count = reminders.filter(r => !r.notified).length;           // ƒê·∫øm s·ªë l·ªùi nh·∫Øc ch∆∞a ƒë∆∞·ª£c b√°o

  if (summaryBtn) summaryBtn.innerText = `üìã L·ªùi nh·∫Øc nh·ªü: ${count}`;// Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng trong n√∫t
  // Hi·ªÉn th·ªã/hay ·∫©n badge tu·ª≥ theo s·ªë l∆∞·ª£ng l·ªùi nh·∫Øc
  if (badge) {
    if (count > 0) {
      badge.innerText = `(${count})`;
      badge.classList.remove("d-none");
    } else {
      badge.classList.add("d-none");
    }
  }
}
// Hi·ªán badge nh·ªè b√°o hi·ªáu c√≥ l·ªùi nh·∫Øc ƒë·∫øn gi·ªù
function showReminderBadge() {
  const badge = document.getElementById("reminder-alert");
  if (badge) badge.classList.remove("d-none");
}
// ·∫®n badge nh·ªè
function hideReminderBadge() {
  const badge = document.getElementById("reminder-alert");
  if (badge) badge.classList.add("d-none");
}

function saveReminders() {
  localStorage.setItem('reminders', JSON.stringify(reminders));
}
// Th√™m tin nh·∫Øn v√†o khung chat
function appendMessage(sender, text) {
  const box = document.getElementById("chat-box");
  const div = document.createElement("div");
  div.className = `message ${sender}`;
  div.innerText = `${text}`;
  box.appendChild(div);
  setTimeout(() => div.classList.add("show"), 10);                  // Th√™m hi·ªáu ·ª©ng xu·∫•t hi·ªán
  box.scrollTop = box.scrollHeight;                                 // Cu·ªôn xu·ªëng d√≤ng cu·ªëi c√πng

  // === L∆ØU KEYWORD T·ª®C TH√å ===                                    // === N·∫øu ng∆∞·ªùi g·ª≠i l√† user th√¨ ki·ªÉm tra t·ª´ kho√° v√† l∆∞u l·∫°i n·∫øu tr√πng ===
  if (sender === 'user') {
    const keywords = JSON.parse(localStorage.getItem("keywords")) || [];
    const keywordMessages = JSON.parse(localStorage.getItem("keywordMessages")) || [];
// N·∫øu tin nh·∫Øn ch·ª©a b·∫•t k·ª≥ t·ª´ kho√° n√†o ƒë√£ l∆∞u
    if (keywords.some(kw => text.toLowerCase().includes(kw.toLowerCase()))) {
      keywordMessages.push(text);
      localStorage.setItem("keywordMessages", JSON.stringify(keywordMessages));

// N·∫øu ƒëang hi·ªÉn th·ªã ph·∫ßn ch·ª©a c√°c ƒëo·∫°n c√≥ t·ª´ kho√° ‚Üí c·∫≠p nh·∫≠t lu√¥n
      const section = document.getElementById("keyword-section");
      if (section && section.style.display !== "none") {
        try {
          renderKeywordMessages();
        } catch (e) {
          console.warn("‚ö†Ô∏è renderKeywordMessages ch∆∞a s·∫µn s√†ng:", e);
        }
      }
    }
  }
}
// Ph√¢n t√≠ch c√∫ ph√°p "nh·∫Øc t√¥i [n·ªôi dung] l√∫c [gi·ªù]"
function parseReminderCommand(text) {
  const regex = /nh·∫Øc t√¥i\s(.+?)(?:\s+l√∫c\s+)?(\d{1,2})[:h](\d{1,2})/i;
  const match = text.toLowerCase().trim().match(regex);
  if (match) {
    const message = match[1].trim();
    const hour = match[2].padStart(2, '0');
    const minute = match[3].padStart(2, '0');
    return { message, time: `${hour}:${minute}` };
  }
  return null;
}
// H√†m g·ª≠i tin nh·∫Øn ƒëi v√† x·ª≠ l√Ω logic li√™n quan
async function sendMessage() {
  const input = document.getElementById("user-input");
  const message = input.value.trim();
  if (!message) return;
// Hi·ªÉn th·ªã tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
  appendMessage("user", message);
  input.value = "";
// N·∫øu ƒëang c√≥ l·ªùi nh·∫Øc ch·ªù x√°c nh·∫≠n t·ª´ user
  if (pendingReminder) {
    const confirm = ["c√≥", "yes", "ok", "ƒë·ªìng √Ω"].includes(message.toLowerCase());
    if (confirm) {                                               // N·∫øu ƒë·ªìng √Ω ‚Üí th√™m l·ªùi nh·∫Øc v√†o danh s√°ch
      reminders.push({ ...pendingReminder, notified: false });
      saveReminders();
      updateReminderSummary();
      appendMessage("bot", `‚úÖ ƒê√£ l∆∞u l·ªùi nh·∫Øc: "${pendingReminder.message}" v√†o l√∫c ${pendingReminder.time}`);
    } else {                                                     // N·∫øu kh√¥ng ƒë·ªìng √Ω ‚Üí h·ªßy
      appendMessage("bot", `‚ùå ƒê√£ h·ªßy l·ªùi nh·∫Øc.`);
    }
    pendingReminder = null;
    return;
  }
// N·∫øu tin nh·∫Øn c√≥ ƒë·ªãnh d·∫°ng "nh·∫Øc t√¥i ..."
  const parsed = parseReminderCommand(message);
  if (parsed) {
    pendingReminder = parsed;
    appendMessage("bot", `üìå B·∫°n c√≥ mu·ªën t·∫°o l·ªùi nh·∫Øc: "${parsed.message}" l√∫c ${parsed.time}? (Tr·∫£ l·ªùi: c√≥ / kh√¥ng)`);
    return;
  }
// N·∫øu kh√¥ng ph·∫£i nh·∫Øc gi·ªù ‚Üí g·ª≠i API ƒë·ªÉ nh·∫≠n ph·∫£n h·ªìi t·ª´ bot
  try {
    const res = await fetch("/api/chat", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ message })
    });

    if (!res.ok) throw new Error("L·ªói server: " + res.status);
    const data = await res.json();
    appendMessage("bot", data.reply || "Kh√¥ng c√≥ ph·∫£n h·ªìi.");
  } catch (err) {
    console.error("Fetch error:", err);
    appendMessage("bot", "‚ùå Bot g·∫∑p l·ªói khi ph·∫£n h·ªìi.");
  }
}
// G·ª≠i tin nh·∫Øn khi nh·∫•n Enter
document.getElementById("user-input").addEventListener("keydown", e => {
  if (e.key === "Enter") sendMessage();
});
// V√≤ng l·∫∑p ki·ªÉm tra l·ªùi nh·∫Øc m·ªói gi√¢y
setInterval(() => {
  const now = new Date();
  const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;

  reminders.forEach((reminder, index) => {
    if (!reminder.notified && reminder.time === currentTime) {     // ƒê√∫ng gi·ªù nh·∫Øc ‚Üí g·ª≠i tin nh·∫Øn th√¥ng b√°o
      appendMessage("bot", `‚è∞ ƒê·∫øn gi·ªù r·ªìi! B·∫°n c·∫ßn: ${reminder.message}`);
      showReminderBadge();
      reminders[index].notified = true;
      saveReminders();
      updateReminderSummary();
    }
  });
}, 1000);
// M·ªü giao di·ªán Assistant, ƒë·ªìng th·ªùi ·∫©n th√¥ng b√°o badge nh·ªè
function openAssistant() {
  hideReminderBadge();
  showPage("assistant");
}
// Hi·ªán/·∫©n popup danh s√°ch l·ªùi nh·∫Øc
function toggleReminderPopup() {
  const popup = document.getElementById("reminder-popup");
  if (!popup) return;
  popup.classList.toggle("d-none");
  if (!popup.classList.contains("d-none")) loadReminderList();    // N·∫øu popup ƒë∆∞·ª£c m·ªü th√¨ n·∫°p danh s√°ch l·ªùi nh·∫Øc
}
// T·∫£i danh s√°ch l·ªùi nh·∫Øc ch∆∞a ƒë∆∞·ª£c th√¥ng b√°o ƒë·ªÉ hi·ªÉn th·ªã trong popup
function loadReminderList() {
  const list = document.getElementById("reminder-items");
  if (!list) return;
  list.innerHTML = "";
  reminders.forEach((r, i) => {
    if (!r.notified) {
      const li = document.createElement("li");
      li.className = "list-group-item d-flex justify-content-between align-items-center";
      li.innerHTML = `<span>‚è∞ ${r.time} - ${r.message}</span><button class=\"btn btn-sm btn-danger\" onclick=\"removeReminder(${i})\">X</button>`;
      list.appendChild(li);
    }
  });
}
// X√≥a 1 l·ªùi nh·∫Øc theo ch·ªâ s·ªë
function removeReminder(index) {
  reminders.splice(index, 1);
  saveReminders();
  updateReminderSummary();
  loadReminderList();
}
// C·∫≠p nh·∫≠t giao di·ªán t·ªïng s·ªë l·ªùi nh·∫Øc l√∫c b·∫Øt ƒë·∫ßu
updateReminderSummary();
